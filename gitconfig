[user]
	# Name used in commit messages.
	name = Mehdi Amrane
	# Email used in commit messages.
	# email = example@example.com
[github]
	# GitHub username for command-line tools.
	user = mehdiamrane
[core]
	# Exclude everything this file. Used for general exclusions.
	excludesfile = ~/.gitignore
	# Set attributes on files. Used for general diff improvements.
	attributesfile = ~/.gitattributes
	# Don't prompt for commit messages for merge commits.
	mergeoptions = --no-edit
	# Speed up some repositories.
	commitGraph = true
	# Output unicode characters (e.g. emoji).
	quotepath = on
	# Whether Git should ignore case differences when comparing file contents.
	ignorecase = false
[push]
	autoSetupRemote = true
[help]
  # Autocorrect mistyped commands.
	autocorrect = 1
[alias]
	## 'New' Commands
	# Unstage the changes in a given file.
	unstage = reset HEAD --
	# View the current changes in the staging area.
	staged = diff --cached
	# Print the name of the current branch.
	current-branch = symbolic-ref --short HEAD
	# Print the name of the current upstream tracking branch.
	upstream = !git config --get branch.$(git current-branch).remote \
	         || echo origin
	# Cherry-pick a commit with your signature.
	sign = cherry-pick --signoff
	# List all current SVN externals for this repository.
	svn-externals = !git svn show-externals | grep -x \\"[^#].*\\"
	# Create a git:// server of the current repository.
	# WARNING: this gives all users read/write access
	# without authentication (so only use on trusted networks).
	serve = !git daemon --reuseaddr --export-all --base-path=. \
	                    --verbose ./.git
	# Merge a branch and commit a merge commit (even if one
	# isn't needed)
	noff = merge --no-ff
	# Merge a branch with a merge commit and resolve any conflicts
	# always using that branch's version rather than the current branch.
	theirs = !git noff -Xtheirs
	# Fetch all branches and rebase the current branch against
	# upstream/HEAD.
	rebase-against-head = !git fetch --all \
	                      && git rebase $(git upstream)/HEAD
	# Push the current branch upstream to origin using the same branch
	# name for the remote branch.
	upstream-current-branch = !git push --set-upstream origin \
	                         $(git current-branch)
	# Create a pull request on GitHub using the `gh` command.
	pull-request = !rm -f .git/PULLREQ_EDITMSG && gh pr create --web
	# Upstream the current branch to origin and create a pull request
	# on GitHub.
	upstream-and-pull-request = !git upstream-current-branch \
	                          && git pull-request
	# Get the current diff but show differences between characters
	# instead of just the differences between lines.
	word-diff = diff --word-diff
	# Push the current branch and set it as the default upstream branch.
	push-and-set-upstream = push --set-upstream
	# Create a new branch by checking out another branch.
	checkout-as-new-branch = checkout -b
	# Rebase against origin/HEAD and prompt for what operations
	# should be performed.
	interactively-rebase-against-origin-head = \
	  !git rev-parse --verify --quiet origin/HEAD >/dev/null || git remote set-head origin --auto && \
		 git rebase --interactive origin/HEAD
	# Show the commit log with a prettier, clearer history.
	pretty-one-line-log = log --graph --oneline --decorate
	# Commit any changes to files, squash them into the last commit
	# and update its date.
	fix-up-previous-commit = !git commit --all --amend \
	                              --reuse-message=HEAD --date=\"$(date)\" #"
	# Commit a work-in-progress commit (to use with
	# fix-up-previous-commit)
	work-in-progress = commit -a -m 'WIP'
	# Merge a branch with a merge commit and use the more time-consuming
	# patience diff algorithm
	patience = !git noff -Xpatience
	# Hard reset branch to the upstream version.
	hard-reset = !git reset --hard $(git upstream)/$(git current-branch)
	# Assume the specified file is unchanged to stop changes
	# being seen by Git
	assume = update-index --assume-unchanged
	# No longer assume a specified file remains unchanged
	unassume = update-index --no-assume-unchanged
	# List all files that are assumed to be unchanged
	assumed = !git ls-files -v | grep '^[hsmrck?]' | cut -c 3-
	# Delete all non-master/main branches
	delete-merged = !git branch --merged | grep -v 'master' | grep -v 'main' | grep -v '*' | xargs -n 1 git branch -D
	# Get the merge-base compared to origin/HEAD
	merge-base-head = merge-base origin/HEAD HEAD
	# Diff against the current branch's merge-base
	diff-merge-base = !git diff $(git merge-base-head)
	# `brew style` changed files
	brew-style-changed = !git diff origin/HEAD --name-only | xargs brew style --fix --display-cop-names

	# Push the current branch upstream to MikeMcQuaid using the same
	# branch name for the remote branch.
	um = !(git remote -v | grep -q MikeMcQuaid || gh repo fork --remote --remote-name MikeMcQuaid) \
	    && gh repo set-default $(git remote get-url origin) \
	    && git push --set-upstream MikeMcQuaid $(git current-branch)
	# Push the current branch to MikeMcQuaid and open a pull request.
	umpr = !git um && gh pr create --web --head MikeMcQuaid:$(git current-branch)

	## Shortened 'New' Commands
	fahr = !git fetch --all && git hard-reset
	rem = !git rebase-against-head
	wip = !git work-in-progress
	pr = !git upstream-and-pull-request
	up = !git upstream-current-branch
	fa = !git fetch --all
	pf = !git push --force-with-lease
	dm = !git diff-merge-base
	mb = !git merge-base-head
	w = !git word-diff
	u = !git push-and-set-upstream
	b = !git checkout-as-new-branch
	i = !git interactively-rebase-against-origin-head
	# `true` needed as the return status is wrong otherwise.
	l = !git pretty-one-line-log || true
	f = !git fix-up-previous-commit

	## Shortened Existing Commands
	p = pull
	s = status --short --branch
[diff]
	# Use the slower but better patience diff algorithm
	algorithm = patience
	# Use new diff algorithm to make e.g. function diffs look better.
	compactionheuristic = true
	# Use a different colour for moved lines than added/modified ones
	colorMoved = default
[diff "xml"]
	textconv = xmllint --format --recover
[mergetool]
	# Don't prompt before opening the merge tool.
	prompt = false
	# Don't keep backups of the merge tool inputs.
	keepBackup = false
	# Don't keep the merge tool temporary input/output files.
	keepTemporaries = false
[apply]
	# Cleanup whitespace by default when apply patches.
	whitespace = fix
[rebase]
	# Run `git stash` if needed before a `git rebase`
	autoStash = true
	# Auto-add `--autosquash` to `git rebase`
	autoSquash = true
[credential "https://github.com"]
	username = mehdiamrane
[commit]
	# Show the diff as a comment in the commit message template.
	verbose = true
[tag]
	# Sort tags by newest first
	sort = -version:refname
[protocol]
	# Use Git v2 protocol for better performance
	version = 2
[log]
	# Print more readable dates in `git log`
	date = human
[merge]
	# Use 3-way diffs.
	conflictstyle = diff3
[checkout]
	# If in doubt about the branch to checkout, pick origin.
	defaultRemote = origin
[init]
	# Use same default branch name as GitHub.
	defaultBranch = main
